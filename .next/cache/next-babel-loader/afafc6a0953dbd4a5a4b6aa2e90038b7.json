{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nconst exampleInitialState = {\n  lastUpdate: 0,\n  light: false,\n  count: 0\n};\nexport const actionTypes = {\n  TICK: 'TICK',\n  INCREMENT: 'INCREMENT',\n  DECREMENT: 'DECREMENT',\n  RESET: 'RESET'\n}; // REDUCERS\n\nexport const reducer = (state = exampleInitialState, action) => {\n  switch (action.type) {\n    case actionTypes.TICK:\n      return _Object$assign({}, state, {\n        lastUpdate: action.ts,\n        light: !!action.light\n      });\n\n    case actionTypes.INCREMENT:\n      return _Object$assign({}, state, {\n        count: state.count + 1\n      });\n\n    case actionTypes.DECREMENT:\n      return _Object$assign({}, state, {\n        count: state.count - 1\n      });\n\n    case actionTypes.RESET:\n      return _Object$assign({}, state, {\n        count: exampleInitialState.count\n      });\n\n    default:\n      return state;\n  }\n}; // ACTIONS\n\nexport const serverRenderClock = () => {\n  return {\n    type: actionTypes.TICK,\n    light: false,\n    ts: _Date$now()\n  };\n};\nexport const startClock = () => {\n  return {\n    type: actionTypes.TICK,\n    light: true,\n    ts: _Date$now()\n  };\n};\nexport const incrementCount = () => {\n  return {\n    type: actionTypes.INCREMENT\n  };\n};\nexport const decrementCount = () => {\n  return {\n    type: actionTypes.DECREMENT\n  };\n};\nexport const resetCount = () => {\n  return {\n    type: actionTypes.RESET\n  };\n};\nexport function initializeStore(initialState = exampleInitialState) {\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddleware()));\n}","map":null,"metadata":{},"sourceType":"module"}